<?xml version="1.0" standalone="yes"?>
<xs:schema version="1.0" targetNamespace="update.expectedmargincall.api.acadiasoft.com" xmlns:tns="update.expectedmargincall.api.acadiasoft.com" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:element name="expectedMarginCalls" type="tns:AcadiaSoft.Expected.Margin.Call.List"/>

  <xs:complexType name="AcadiaSoft.Expected.Margin.Call.List">
    <xs:sequence>
      <xs:element name="skip" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="max" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="totalCount" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="expectedMarginCall" type="tns:AcadiaSoft.Expected.Margin.Call" form="qualified" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AcadiaSoft.Expected.Margin.Call">
    <xs:all>
      <xs:element name="ampId" type="xs:string" form="qualified"/>
      <xs:element name="autoAgreeLowerTotalCallAmount" type="xs:boolean" form="qualified" minOccurs="0"/>
      <xs:element name="autoAgreeWithinTolerance" type="xs:boolean" form="qualified" minOccurs="0"/>
      <xs:element name="autoFullDisputeForNoAction" type="xs:boolean" form="qualified" minOccurs="0"/>
      <xs:element name="autoPartialDisputeMismatched" type="xs:boolean" form="qualified" minOccurs="0"/>
      <xs:element name="collateralValue" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="comments" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="counterpartyCollateralBalance" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="counterpartyInitialMargin" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="counterpartyMarkToMarket" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="currency" type="xs:string" form="qualified"/>
      <xs:element name="deliverAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="deliverMinimumTransferAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="deliverRoundingAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="deliveryType" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="exposure" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="imRole" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="initialCollateralValue" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="initialExposure" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="initialNetRequiredAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="initialObligationDeliver" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="initialObligationReturn" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="initialPendingCollateral" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="interestAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="minimumTransferAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="netRequiredAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="pendingCollateral" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="returnAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="returnMinimumTransferAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="returnRoundingAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="roundingAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="settlementDate" type="tns:AcadiaSoft.Expected.Margin.Call.Date.Only" form="qualified" minOccurs="0"/>
      <xs:element name="threshold" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="totalCallAmount" type="xs:decimal" form="qualified"/>
      <xs:element name="callType" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="valuationDate" type="tns:AcadiaSoft.Expected.Margin.Call.Date.Only" form="qualified"/>
      <xs:element name="variationCollateralValue" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="variationExposure" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="variationMargin" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="variationNetRequiredAmount" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="variationObligationDeliver" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="variationObligationReturn" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="variationPendingCollateral" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="version" type="xs:int" form="qualified" minOccurs="0"/>
      <xs:element name="expectedTolerance" type="xs:decimal" form="qualified" minOccurs="0"/>
      <xs:element name="externalUsername" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="localCounterpartyAmpId" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="externalReference" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="marginAgreementAmpId" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="marginAgreementShortName" type="xs:string" form="qualified" minOccurs="0"/>
      <xs:element name="noAction" type="xs:boolean" form="qualified" minOccurs="0"/>
      <xs:element name="notification" type="xs:boolean" form="qualified" minOccurs="0"/>
      <xs:element name="temporaryExternalReference" type="xs:string" form="qualified" minOccurs="0"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="AcadiaSoft.Expected.Margin.Call.Date.Only">
    <xs:all>
      <xs:element name="day" type="xs:int" form="qualified"/>
      <xs:element name="month" type="xs:int" form="qualified"/>
      <xs:element name="year" type="xs:int" form="qualified"/>
    </xs:all>
  </xs:complexType>
</xs:schema>


